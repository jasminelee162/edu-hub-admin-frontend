{"ast":null,"code":"import router from './router';\nimport store from './store';\nimport { Message } from 'element-ui';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\nimport { getToken, removeToken } from '@/utils/token';\nNProgress.configure({\n  showSpinner: false\n});\nconst whiteList = ['/login', '/register'];\nrouter.beforeEach((to, from, next) => {\n  NProgress.start();\n  if (getToken()) {\n    if (to.path === '/login') {\n      next({\n        path: '/'\n      });\n      NProgress.done();\n    } else {\n      //这里就要开始构造动态路由和前端权限了\n      //如果还没有获取菜单权限先请求获取\n      if (store.getters['menu/getMenu'].length == 0 && !store.getters['menu/getFlag']) {\n        store.dispatch('menu/generateRoutes').then(accessRoutes => {\n          // 根据roles权限生成可访问的路由表\n          router.addRoutes(accessRoutes); // 动态添加可访问路由表\n          next({\n            ...to,\n            replace: true\n          }); // hack方法 确保addRoutes已完成\n        }).catch(err => {\n          store.dispatch('user/logout').then(() => {\n            store.commit(\"menu/setMenus\", []);\n            store.commit(\"menu/setRoutes\", []);\n            store.commit(\"menu/setDisplayMenus\", []);\n            store.commit(\"menu/setBtnMenus\", []);\n            store.commit('menu/setActiveMenuArrary', []);\n            store.commit('menu/setActiveMenu', \"/index\");\n            removeToken();\n            Message.error(err);\n            next({\n              path: '/login'\n            });\n          });\n        });\n      } else {\n        next();\n      }\n    }\n  } else {\n    // 没有token\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 在免登录白名单，直接进入\n      next();\n    } else {\n      // ?redirect=${to.fullPath}\n      next(`/login`); // 否则全部重定向到登录页\n      NProgress.done();\n    }\n  }\n});\nrouter.afterEach(() => {\n  NProgress.done();\n});","map":{"version":3,"names":["router","store","Message","NProgress","getToken","removeToken","configure","showSpinner","whiteList","beforeEach","to","from","next","start","path","done","getters","length","dispatch","then","accessRoutes","addRoutes","replace","catch","err","commit","error","indexOf","afterEach"],"sources":["E:/project/java/46-SpringBoot+Vue在线学习教育平台/edu-hub-admin-frontend/src/permission.js"],"sourcesContent":["import router from './router'\nimport store from './store'\nimport { Message } from 'element-ui'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\nimport { getToken,removeToken } from '@/utils/token'\n\nNProgress.configure({ showSpinner: false })\n\nconst whiteList = ['/login', '/register']\n\nrouter.beforeEach((to, from, next) => {\n    NProgress.start()\n    if(getToken()) {\n        if (to.path === '/login') {\n            next({ path: '/' })\n            NProgress.done()\n        } else { \n            //这里就要开始构造动态路由和前端权限了\n            //如果还没有获取菜单权限先请求获取\n            if(store.getters['menu/getMenu'].length == 0 && !store.getters['menu/getFlag']) {\n                store.dispatch('menu/generateRoutes').then(accessRoutes => {\n                    // 根据roles权限生成可访问的路由表\n                    router.addRoutes(accessRoutes) // 动态添加可访问路由表\n                    next({ ...to, replace: true }) // hack方法 确保addRoutes已完成\n                }).catch(err => {\n                    store.dispatch('user/logout').then(() => {\n                        store.commit(\"menu/setMenus\",[])\n                        store.commit(\"menu/setRoutes\",[])\n                        store.commit(\"menu/setDisplayMenus\",[])\n                        store.commit(\"menu/setBtnMenus\",[])\n                        store.commit('menu/setActiveMenuArrary', [])\n                        store.commit('menu/setActiveMenu', \"/index\")\n                        removeToken()\n                        Message.error(err)\n                        next({ path: '/login' })\n                    })\n                })\n            } else {\n                next()\n            }\n        }\n    } else {\n        // 没有token\n        if (whiteList.indexOf(to.path) !== -1) {\n            // 在免登录白名单，直接进入\n            next()\n        } else {\n            // ?redirect=${to.fullPath}\n            next(`/login`) // 否则全部重定向到登录页\n            NProgress.done()\n        }\n    }\n})\n\nrouter.afterEach(() => {\n    NProgress.done()\n})"],"mappings":"AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAO,yBAAyB;AAChC,SAASC,QAAQ,EAACC,WAAW,QAAQ,eAAe;AAEpDF,SAAS,CAACG,SAAS,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC,CAAC;AAE3C,MAAMC,SAAS,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC;AAEzCR,MAAM,CAACS,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClCT,SAAS,CAACU,KAAK,CAAC,CAAC;EACjB,IAAGT,QAAQ,CAAC,CAAC,EAAE;IACX,IAAIM,EAAE,CAACI,IAAI,KAAK,QAAQ,EAAE;MACtBF,IAAI,CAAC;QAAEE,IAAI,EAAE;MAAI,CAAC,CAAC;MACnBX,SAAS,CAACY,IAAI,CAAC,CAAC;IACpB,CAAC,MAAM;MACH;MACA;MACA,IAAGd,KAAK,CAACe,OAAO,CAAC,cAAc,CAAC,CAACC,MAAM,IAAI,CAAC,IAAI,CAAChB,KAAK,CAACe,OAAO,CAAC,cAAc,CAAC,EAAE;QAC5Ef,KAAK,CAACiB,QAAQ,CAAC,qBAAqB,CAAC,CAACC,IAAI,CAACC,YAAY,IAAI;UACvD;UACApB,MAAM,CAACqB,SAAS,CAACD,YAAY,CAAC,EAAC;UAC/BR,IAAI,CAAC;YAAE,GAAGF,EAAE;YAAEY,OAAO,EAAE;UAAK,CAAC,CAAC,EAAC;QACnC,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;UACZvB,KAAK,CAACiB,QAAQ,CAAC,aAAa,CAAC,CAACC,IAAI,CAAC,MAAM;YACrClB,KAAK,CAACwB,MAAM,CAAC,eAAe,EAAC,EAAE,CAAC;YAChCxB,KAAK,CAACwB,MAAM,CAAC,gBAAgB,EAAC,EAAE,CAAC;YACjCxB,KAAK,CAACwB,MAAM,CAAC,sBAAsB,EAAC,EAAE,CAAC;YACvCxB,KAAK,CAACwB,MAAM,CAAC,kBAAkB,EAAC,EAAE,CAAC;YACnCxB,KAAK,CAACwB,MAAM,CAAC,0BAA0B,EAAE,EAAE,CAAC;YAC5CxB,KAAK,CAACwB,MAAM,CAAC,oBAAoB,EAAE,QAAQ,CAAC;YAC5CpB,WAAW,CAAC,CAAC;YACbH,OAAO,CAACwB,KAAK,CAACF,GAAG,CAAC;YAClBZ,IAAI,CAAC;cAAEE,IAAI,EAAE;YAAS,CAAC,CAAC;UAC5B,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,MAAM;QACHF,IAAI,CAAC,CAAC;MACV;IACJ;EACJ,CAAC,MAAM;IACH;IACA,IAAIJ,SAAS,CAACmB,OAAO,CAACjB,EAAE,CAACI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACnC;MACAF,IAAI,CAAC,CAAC;IACV,CAAC,MAAM;MACH;MACAA,IAAI,CAAC,QAAQ,CAAC,EAAC;MACfT,SAAS,CAACY,IAAI,CAAC,CAAC;IACpB;EACJ;AACJ,CAAC,CAAC;AAEFf,MAAM,CAAC4B,SAAS,CAAC,MAAM;EACnBzB,SAAS,CAACY,IAAI,CAAC,CAAC;AACpB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}