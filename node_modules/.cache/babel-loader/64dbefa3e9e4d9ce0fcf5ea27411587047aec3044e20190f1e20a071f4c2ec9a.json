{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { uploadTemplate, getTemplates, deleteTemplate, getTemplateContent } from '../../../api/api';\nimport { renderAsync } from 'docx-preview';\nexport default {\n  data() {\n    return {\n      loading: true,\n      selected: [],\n      search: {\n        name: \"\",\n        dateRange: [],\n        pageNumber: 1,\n        pageSize: 10\n      },\n      total: 0,\n      tableData: []\n    };\n  },\n  methods: {\n    // 上传前校验\n    beforeUpload(file) {\n      const isLt10M = file.size / 1024 / 1024 < 10;\n      if (!isLt10M) {\n        this.$message.error('上传文件大小不能超过10MB!');\n        return false;\n      }\n      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'image/jpeg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        this.$message.error('只支持上传PDF、Word、Excel、PPT、JPG和PNG文件!');\n        return false;\n      }\n      return true;\n    },\n    // 文件上传\n    uploadFile({\n      file,\n      onProgress,\n      onSuccess,\n      onError\n    }) {\n      const formData = new FormData();\n      formData.append('file', file);\n      uploadTemplate(formData, {\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          onProgress({\n            percent: percentCompleted\n          });\n        }\n      }).then(res => {\n        if (res.code === 1000) {\n          this.$notify.success({\n            title: '成功',\n            message: '上传成功'\n          });\n          this.query();\n          onSuccess(res);\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '上传失败'\n          });\n          onError(new Error(res.message || '上传失败'));\n        }\n      }).catch(error => {\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '上传失败'\n        });\n        onError(error);\n      });\n    },\n    // 查看内容\n    viewContent(id) {\n      this.loading = true;\n      getTemplateContent({\n        id\n      }).then(res => {\n        this.loading = false;\n        if (res.code !== 1000) {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '获取内容失败'\n          });\n          return;\n        }\n        const template = this.tableData.find(item => item.id === id);\n        const data = res.data;\n        const fileType = (data.fileType || template?.fileType || '').toString().toLowerCase().replace('.', '').trim();\n        if (!data.fileContent) {\n          this.$message.error('文件内容为空');\n          return;\n        }\n        const mimeType = this.getMimeType(fileType);\n        const blob = this.base64ToBlob(data.fileContent, mimeType);\n        if (['pdf'].includes(fileType)) {\n          window.open(URL.createObjectURL(blob), '_blank');\n        } else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileType)) {\n          const imgWindow = window.open('', '_blank');\n          imgWindow.document.write(`<img src=\"${URL.createObjectURL(blob)}\" style=\"max-width:100%\"/>`);\n        } else if (fileType === 'docx') {\n          this.showDocx(data.fileContent);\n        } else {\n          this.$alert(`不支持预览 ${fileType} 格式文件`, '提示', {\n            confirmButtonText: '下载',\n            callback: () => this.downloadFile(id)\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '获取内容失败'\n        });\n      });\n    },\n    // 下载文件\n    downloadFile(id) {\n      this.loading = true;\n      getTemplateContent({\n        id\n      }).then(res => {\n        this.loading = false;\n        if (res.code === 1000) {\n          const template = this.tableData.find(item => item.id === id);\n          const base64 = res.data.fileContent;\n          const mimeType = this.getMimeType(template.fileType);\n          const blob = this.base64ToBlob(base64, mimeType);\n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = template.name || 'download';\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          URL.revokeObjectURL(url);\n          this.$notify.success({\n            title: '成功',\n            message: '文件下载已开始'\n          });\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '下载失败'\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '下载失败'\n        });\n      });\n    },\n    // 查询数据\n    query() {\n      this.loading = true;\n      const params = {\n        ...this.search,\n        startDate: this.search.dateRange ? this.search.dateRange[0] : '',\n        endDate: this.search.dateRange ? this.search.dateRange[1] : ''\n      };\n      delete params.dateRange;\n      getTemplates(params).then(res => {\n        this.loading = false;\n        if (res.code === 1000) {\n          this.tableData = res.data.records || [];\n          this.total = res.data.total || 0;\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '获取数据失败'\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '获取数据失败'\n        });\n      });\n    },\n    // 重置搜索\n    refresh() {\n      this.search.name = \"\";\n      this.search.dateRange = [];\n      this.query();\n    },\n    // 分页变化\n    handleCurrentChange(val) {\n      this.search.pageNumber = val;\n      this.query();\n    },\n    // 每页条数变化\n    handleSizeChange(val) {\n      this.search.pageSize = val;\n      this.query();\n    },\n    // 选择变化\n    handleSelectionChange(val) {\n      this.selected = val.map(item => item.id);\n    },\n    // 批量删除\n    deleteDataBtn() {\n      if (this.selected.length === 0) {\n        this.$message.warning('请至少选择一条数据');\n        return;\n      }\n      this.$confirm(`确定删除选中的 ${this.selected.length} 条数据?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.deleteData(this.selected);\n      }).catch(() => {\n        this.$message.info('已取消删除');\n      });\n    },\n    // 删除数据\n    deleteData(ids) {\n      const idsArray = Array.isArray(ids) ? ids : [ids];\n      deleteTemplate(idsArray).then(res => {\n        if (res.code === 1000) {\n          this.$message.success('删除成功!');\n          this.search.pageNumber = 1;\n          this.query();\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '删除失败'\n          });\n        }\n      }).catch(error => {\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '删除失败'\n        });\n      });\n    },\n    // 辅助方法\n    base64ToBlob(base64Data, mimeType = '') {\n      const base64WithoutPrefix = base64Data.replace(/^data:\\w+\\/\\w+;base64,/, '');\n      const byteCharacters = atob(base64WithoutPrefix);\n      const byteArrays = [];\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n        const slice = byteCharacters.slice(offset, offset + 512);\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n        byteArrays.push(new Uint8Array(byteNumbers));\n      }\n      return new Blob(byteArrays, {\n        type: mimeType\n      });\n    },\n    getMimeType(fileType) {\n      const map = {\n        pdf: 'application/pdf',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        png: 'image/png',\n        doc: 'application/msword',\n        docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        ppt: 'application/vnd.ms-powerpoint',\n        pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n        xls: 'application/vnd.ms-excel',\n        xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      };\n      return map[fileType] || 'application/octet-stream';\n    },\n    showDocx(fileContentBase64) {\n      const blob = this.base64ToBlob(fileContentBase64, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');\n      const container = document.createElement('div');\n      container.style.cssText = `\n        width: 100%;\n        height: 90vh;\n        margin: 0 auto;\n        overflow: auto;\n        padding: 20px;\n      `;\n      const win = window.open('', '_blank');\n      win.document.title = '文档预览';\n      win.document.body.style.margin = '0';\n      win.document.body.appendChild(container);\n      container.innerHTML = '<div style=\"text-align:center;padding:50px\">正在加载文档...</div>';\n      renderAsync(blob, container, null, {\n        className: \"docx-viewer\",\n        inWrapper: true,\n        ignoreWidth: false,\n        ignoreHeight: false,\n        ignoreFonts: false\n      }).catch(error => {\n        console.error('DOCX渲染失败:', error);\n        container.innerHTML = '<div style=\"color:red\">文档预览失败，请下载后查看</div>';\n      });\n    }\n  },\n  mounted() {\n    this.query();\n  }\n};","map":{"version":3,"names":["uploadTemplate","getTemplates","deleteTemplate","getTemplateContent","renderAsync","data","loading","selected","search","name","dateRange","pageNumber","pageSize","total","tableData","methods","beforeUpload","file","isLt10M","size","$message","error","allowedTypes","includes","type","uploadFile","onProgress","onSuccess","onError","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","percent","then","res","code","$notify","success","title","message","query","Error","catch","viewContent","id","template","find","item","fileType","toString","toLowerCase","replace","trim","fileContent","mimeType","getMimeType","blob","base64ToBlob","window","open","URL","createObjectURL","imgWindow","document","write","showDocx","$alert","confirmButtonText","callback","downloadFile","base64","url","link","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","params","startDate","endDate","records","refresh","handleCurrentChange","val","handleSizeChange","handleSelectionChange","map","deleteDataBtn","length","warning","$confirm","cancelButtonText","deleteData","info","ids","idsArray","Array","isArray","base64Data","base64WithoutPrefix","byteCharacters","atob","byteArrays","offset","slice","byteNumbers","i","charCodeAt","push","Uint8Array","Blob","pdf","jpg","jpeg","png","doc","docx","ppt","pptx","xls","xlsx","fileContentBase64","container","style","cssText","win","margin","innerHTML","className","inWrapper","ignoreWidth","ignoreHeight","ignoreFonts","console","mounted"],"sources":["src/views/system/user/user.vue"],"sourcesContent":["<template>\r\n  <div class=\"template-management\">\r\n    <!-- 搜索区域 -->\r\n    <div class=\"search-panel\">\r\n      <el-row :gutter=\"15\">\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"8\" :xl=\"8\">\r\n          <div class=\"search-item\">\r\n            <span class=\"search-title\">\r\n              <i class=\"el-icon-document\"></i> 资料名称:\r\n            </span>\r\n            <el-input\r\n              size=\"small\"\r\n              placeholder=\"请输入资料名称\"\r\n              v-model=\"search.name\"\r\n              class=\"tech-input\">\r\n            </el-input>\r\n          </div>\r\n        </el-col>\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"8\" :xl=\"8\">\r\n          <div class=\"search-item\">\r\n            <span class=\"search-title\">\r\n              <i class=\"el-icon-date\"></i> 创建时间:\r\n            </span>\r\n            <el-date-picker\r\n              size=\"small\"\r\n              v-model=\"search.dateRange\"\r\n              type=\"daterange\"\r\n              range-separator=\"至\"\r\n              start-placeholder=\"开始日期\"\r\n              end-placeholder=\"结束日期\"\r\n              value-format=\"yyyy-MM-dd\">\r\n            </el-date-picker>\r\n          </div>\r\n        </el-col>\r\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"8\" :xl=\"8\">\r\n          <div class=\"search-actions\">\r\n            <el-button \r\n              size=\"small\" \r\n              icon=\"el-icon-search\" \r\n              type=\"primary\" \r\n              @click=\"searchPage\"\r\n              class=\"search-btn\">\r\n              查询\r\n            </el-button>\r\n            <el-button \r\n              size=\"small\" \r\n              icon=\"el-icon-refresh\" \r\n              @click=\"refresh\"\r\n              class=\"reset-btn\">\r\n              重置\r\n            </el-button>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <!-- 数据区域 -->\r\n    <div class=\"data-panel\">\r\n      <!-- 操作栏 -->\r\n      <div class=\"action-bar\">\r\n        <el-upload\r\n          action=\"\"\r\n          :show-file-list=\"false\"\r\n          :before-upload=\"beforeUpload\"\r\n          :http-request=\"uploadFile\">\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            icon=\"el-icon-upload\"\r\n            class=\"action-btn\">\r\n            上传资料\r\n          </el-button>\r\n        </el-upload>\r\n        <el-button \r\n          type=\"danger\" \r\n          size=\"small\" \r\n          icon=\"el-icon-delete\" \r\n          :disabled=\"selected.length <= 0\"\r\n          @click=\"deleteDataBtn\"\r\n          class=\"action-btn\">\r\n          删除\r\n        </el-button>\r\n      </div>\r\n\r\n      <!-- 数据表格 -->\r\n      <el-table\r\n        v-loading=\"loading\"\r\n        :data=\"tableData\"\r\n        @selection-change=\"handleSelectionChange\"\r\n        stripe\r\n        style=\"width: 100%\">\r\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\"></el-table-column>\r\n        \r\n        <el-table-column prop=\"name\" label=\"资料名称\" min-width=\"200\">\r\n          <template #default=\"{row}\">\r\n            <div class=\"file-cell\">\r\n              <i class=\"el-icon-document\"></i>\r\n              <span>{{ row.name }}</span>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n        \r\n        <el-table-column prop=\"createdAt\" label=\"创建时间\" width=\"180\">\r\n          <template #default=\"{row}\">\r\n            <div class=\"time-cell\">\r\n              <i class=\"el-icon-time\"></i>\r\n              <span>{{ row.createdAt }}</span>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n        \r\n        <el-table-column label=\"操作\" width=\"220\" fixed=\"right\">\r\n          <template #default=\"{row}\">\r\n            <div class=\"action-buttons\">\r\n              <el-button \r\n                size=\"mini\" \r\n                @click=\"viewContent(row.id)\"\r\n                class=\"action-btn\">\r\n                <i class=\"el-icon-view\"></i> 查看\r\n              </el-button>\r\n              <el-button \r\n                size=\"mini\" \r\n                @click=\"downloadFile(row.id)\"\r\n                class=\"action-btn\">\r\n                <i class=\"el-icon-download\"></i> 下载\r\n              </el-button>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页 -->\r\n      <el-pagination\r\n        background\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        :page-sizes=\"[10, 20, 50, 100]\"\r\n        :page-size=\"search.pageSize\"\r\n        :current-page=\"search.pageNumber\"\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        :total=\"total\"\r\n        class=\"tech-pagination\">\r\n      </el-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { uploadTemplate, getTemplates, deleteTemplate, getTemplateContent } from '../../../api/api'\r\nimport { renderAsync } from 'docx-preview'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      selected: [],\r\n      search: {\r\n        name: \"\",\r\n        dateRange: [],\r\n        pageNumber: 1,\r\n        pageSize: 10\r\n      },\r\n      total: 0,\r\n      tableData: [],\r\n    }\r\n  },\r\n  methods: {\r\n    // 上传前校验\r\n    beforeUpload(file) {\r\n      const isLt10M = file.size / 1024 / 1024 < 10\r\n      if (!isLt10M) {\r\n        this.$message.error('上传文件大小不能超过10MB!')\r\n        return false\r\n      }\r\n      \r\n      const allowedTypes = [\r\n        'application/pdf',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        'application/vnd.ms-excel',\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n        'application/vnd.ms-powerpoint',\r\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n        'image/jpeg',\r\n        'image/png'\r\n      ]\r\n      \r\n      if (!allowedTypes.includes(file.type)) {\r\n        this.$message.error('只支持上传PDF、Word、Excel、PPT、JPG和PNG文件!')\r\n        return false\r\n      }\r\n      \r\n      return true\r\n    },\r\n    \r\n    // 文件上传\r\n    uploadFile({ file, onProgress, onSuccess, onError }) {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      uploadTemplate(formData, {\r\n        onUploadProgress: (progressEvent) => {\r\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          onProgress({ percent: percentCompleted });\r\n        }\r\n      }).then(res => {\r\n        if (res.code === 1000) {\r\n          this.$notify.success({ title: '成功', message: '上传成功' });\r\n          this.query();\r\n          onSuccess(res);\r\n        } else {\r\n          this.$notify.error({ title: '错误', message: res.message || '上传失败' });\r\n          onError(new Error(res.message || '上传失败'));\r\n        }\r\n      }).catch(error => {\r\n        this.$notify.error({ title: '错误', message: error.message || '上传失败' });\r\n        onError(error);\r\n      });\r\n    },\r\n    \r\n    // 查看内容\r\n    viewContent(id) {\r\n      this.loading = true;\r\n      getTemplateContent({ id }).then(res => {\r\n        this.loading = false;\r\n        if (res.code !== 1000) {\r\n          this.$notify.error({ title: '错误', message: res.message || '获取内容失败' });\r\n          return;\r\n        }\r\n\r\n        const template = this.tableData.find(item => item.id === id);\r\n        const data = res.data;\r\n        const fileType = (data.fileType || template?.fileType || '')\r\n                        .toString()\r\n                        .toLowerCase()\r\n                        .replace('.', '')\r\n                        .trim();\r\n\r\n        if (!data.fileContent) {\r\n          this.$message.error('文件内容为空');\r\n          return;\r\n        }\r\n\r\n        const mimeType = this.getMimeType(fileType);\r\n        const blob = this.base64ToBlob(data.fileContent, mimeType);\r\n        \r\n        if (['pdf'].includes(fileType)) {\r\n          window.open(URL.createObjectURL(blob), '_blank');\r\n        } \r\n        else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileType)) {\r\n          const imgWindow = window.open('', '_blank');\r\n          imgWindow.document.write(`<img src=\"${URL.createObjectURL(blob)}\" style=\"max-width:100%\"/>`);\r\n        }\r\n        else if (fileType === 'docx') {\r\n          this.showDocx(data.fileContent);\r\n        }\r\n        else {\r\n          this.$alert(`不支持预览 ${fileType} 格式文件`, '提示', {\r\n            confirmButtonText: '下载',\r\n            callback: () => this.downloadFile(id)\r\n          });\r\n        }\r\n      }).catch(error => {\r\n        this.loading = false;\r\n        this.$notify.error({\r\n          title: '错误',\r\n          message: error.message || '获取内容失败'\r\n        });\r\n      });\r\n    },\r\n\r\n    // 下载文件\r\n    downloadFile(id) {\r\n      this.loading = true;\r\n      getTemplateContent({ id }).then(res => {\r\n        this.loading = false;\r\n        if (res.code === 1000) {\r\n          const template = this.tableData.find(item => item.id === id);\r\n          const base64 = res.data.fileContent;\r\n          const mimeType = this.getMimeType(template.fileType);\r\n          const blob = this.base64ToBlob(base64, mimeType);\r\n          const url = URL.createObjectURL(blob);\r\n          \r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.download = template.name || 'download';\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n          URL.revokeObjectURL(url);\r\n          \r\n          this.$notify.success({\r\n            title: '成功',\r\n            message: '文件下载已开始'\r\n          });\r\n        } else {\r\n          this.$notify.error({\r\n            title: '错误',\r\n            message: res.message || '下载失败'\r\n          });\r\n        }\r\n      }).catch(error => {\r\n        this.loading = false;\r\n        this.$notify.error({\r\n          title: '错误',\r\n          message: error.message || '下载失败'\r\n        });\r\n      });\r\n    },\r\n    \r\n    // 查询数据\r\n    query() {\r\n      this.loading = true\r\n      const params = {\r\n        ...this.search,\r\n        startDate: this.search.dateRange ? this.search.dateRange[0] : '',\r\n        endDate: this.search.dateRange ? this.search.dateRange[1] : ''\r\n      }\r\n      delete params.dateRange\r\n      \r\n      getTemplates(params).then(res => {\r\n        this.loading = false\r\n        if (res.code === 1000) {\r\n          this.tableData = res.data.records || []\r\n          this.total = res.data.total || 0\r\n        } else {\r\n          this.$notify.error({\r\n            title: '错误',\r\n            message: res.message || '获取数据失败'\r\n          })\r\n        }\r\n      }).catch(error => {\r\n        this.loading = false\r\n        this.$notify.error({\r\n          title: '错误',\r\n          message: error.message || '获取数据失败'\r\n        })\r\n      })\r\n    },\r\n    \r\n    // 重置搜索\r\n    refresh() {\r\n      this.search.name = \"\"\r\n      this.search.dateRange = []\r\n      this.query()\r\n    },\r\n    \r\n    // 分页变化\r\n    handleCurrentChange(val) {\r\n      this.search.pageNumber = val\r\n      this.query()\r\n    },\r\n    \r\n    // 每页条数变化\r\n    handleSizeChange(val) {\r\n      this.search.pageSize = val\r\n      this.query()\r\n    },\r\n    \r\n    // 选择变化\r\n    handleSelectionChange(val) {\r\n      this.selected = val.map(item => item.id)\r\n    },\r\n    \r\n    // 批量删除\r\n    deleteDataBtn() {\r\n      if (this.selected.length === 0) {\r\n        this.$message.warning('请至少选择一条数据')\r\n        return\r\n      }\r\n      \r\n      this.$confirm(`确定删除选中的 ${this.selected.length} 条数据?`, '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.deleteData(this.selected)\r\n      }).catch(() => {\r\n        this.$message.info('已取消删除')\r\n      })\r\n    },\r\n    \r\n    // 删除数据\r\n    deleteData(ids) {\r\n      const idsArray = Array.isArray(ids) ? ids : [ids];\r\n      \r\n      deleteTemplate(idsArray).then(res => {\r\n        if (res.code === 1000) {\r\n          this.$message.success('删除成功!')\r\n          this.search.pageNumber = 1\r\n          this.query()\r\n        } else {\r\n          this.$notify.error({\r\n            title: '错误',\r\n            message: res.message || '删除失败'\r\n          })\r\n        }\r\n      }).catch(error => {\r\n        this.$notify.error({\r\n          title: '错误',\r\n          message: error.message || '删除失败'\r\n        })\r\n      })\r\n    },\r\n\r\n    // 辅助方法\r\n    base64ToBlob(base64Data, mimeType = '') {\r\n      const base64WithoutPrefix = base64Data.replace(/^data:\\w+\\/\\w+;base64,/, '');\r\n      const byteCharacters = atob(base64WithoutPrefix);\r\n      const byteArrays = [];\r\n\r\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n        const slice = byteCharacters.slice(offset, offset + 512);\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n          byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n        byteArrays.push(new Uint8Array(byteNumbers));\r\n      }\r\n\r\n      return new Blob(byteArrays, { type: mimeType });\r\n    },\r\n\r\n    getMimeType(fileType) {\r\n      const map = {\r\n        pdf: 'application/pdf',\r\n        jpg: 'image/jpeg',\r\n        jpeg: 'image/jpeg',\r\n        png: 'image/png',\r\n        doc: 'application/msword',\r\n        docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        ppt: 'application/vnd.ms-powerpoint',\r\n        pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n        xls: 'application/vnd.ms-excel',\r\n        xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n      };\r\n      return map[fileType] || 'application/octet-stream';\r\n    },\r\n\r\n    showDocx(fileContentBase64) {\r\n      const blob = this.base64ToBlob(\r\n        fileContentBase64, \r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n      );\r\n      \r\n      const container = document.createElement('div');\r\n      container.style.cssText = `\r\n        width: 100%;\r\n        height: 90vh;\r\n        margin: 0 auto;\r\n        overflow: auto;\r\n        padding: 20px;\r\n      `;\r\n      \r\n      const win = window.open('', '_blank');\r\n      win.document.title = '文档预览';\r\n      win.document.body.style.margin = '0';\r\n      win.document.body.appendChild(container);\r\n      \r\n      container.innerHTML = '<div style=\"text-align:center;padding:50px\">正在加载文档...</div>';\r\n      \r\n      renderAsync(blob, container, null, {\r\n        className: \"docx-viewer\",\r\n        inWrapper: true,\r\n        ignoreWidth: false,\r\n        ignoreHeight: false,\r\n        ignoreFonts: false\r\n      }).catch(error => {\r\n        console.error('DOCX渲染失败:', error);\r\n        container.innerHTML = '<div style=\"color:red\">文档预览失败，请下载后查看</div>';\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.query()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.template-management {\r\n  padding: 20px;\r\n}\r\n\r\n.search-panel {\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 1px 4px rgba(0,0,0,0.08);\r\n}\r\n\r\n.search-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.search-title {\r\n  font-size: 14px;\r\n  color: #606266;\r\n  margin-bottom: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.search-title i {\r\n  margin-right: 6px;\r\n  color: #7B68EE;\r\n}\r\n\r\n.search-actions {\r\n  display: flex;\r\n  align-items: flex-end;\r\n  height: 100%;\r\n}\r\n\r\n.data-panel {\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  box-shadow: 0 1px 4px rgba(0,0,0,0.08);\r\n}\r\n\r\n.action-bar {\r\n  padding: 0 0 15px 0;\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.file-cell, .time-cell {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.file-cell i {\r\n  color: #7B68EE;\r\n  margin-right: 8px;\r\n}\r\n\r\n.time-cell i {\r\n  color: #909399;\r\n  margin-right: 8px;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.action-btn {\r\n  border-radius: 4px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n\r\n.action-btn i {\r\n  margin-right: 4px;\r\n}\r\n\r\n.tech-pagination {\r\n  margin-top: 15px;\r\n  text-align: right;\r\n}\r\n</style>\r\n\r\n<style>\r\n.tech-input .el-input__inner {\r\n  border-radius: 4px;\r\n  border: 1px solid #DCDFE6;\r\n}\r\n\r\n.search-btn {\r\n  background: #7B68EE;\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n}\r\n\r\n.reset-btn {\r\n  border-radius: 4px;\r\n}\r\n\r\n.tech-pagination .el-pagination.is-background .el-pager li:not(.disabled).active {\r\n  background-color: #7B68EE;\r\n  color: white;\r\n}\r\n\r\n.el-table {\r\n  border-radius: 8px;\r\n}\r\n\r\n.el-table th {\r\n  background-color: #F5F7FA;\r\n  color: #606266;\r\n}\r\n\r\n.el-table .el-table__body tr:hover>td {\r\n  background-color: #F5F2FF !important;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}