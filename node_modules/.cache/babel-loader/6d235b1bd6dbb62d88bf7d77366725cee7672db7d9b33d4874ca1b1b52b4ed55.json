{"ast":null,"code":"import { mixin } from '../../../minix/index';\nimport { editAccount, getAccountById } from '../../../api/api';\nexport default {\n  mixins: [mixin],\n  data() {\n    return {\n      editorOption: {\n        placeholder: \"请输入文字内容\",\n        modules: {\n          toolbar: {\n            container: [[\"bold\", \"italic\", \"underline\", \"strike\"], [\"blockquote\", \"code-block\"], [{\n              header: 1\n            }, {\n              header: 2\n            }], [{\n              list: \"ordered\"\n            }, {\n              list: \"bullet\"\n            }], [{\n              script: \"sub\"\n            }, {\n              script: \"super\"\n            }], [{\n              indent: \"-1\"\n            }, {\n              indent: \"+1\"\n            }], [{\n              direction: \"rtl\"\n            }], [{\n              size: [\"small\", false, \"large\", \"huge\"]\n            }], [{\n              header: [1, 2, 3, 4, 5, 6, false]\n            }], [{\n              color: []\n            }, {\n              background: []\n            }], [{\n              font: []\n            }], [{\n              align: []\n            }], [\"clean\"], [\"image\"]],\n            handlers: {\n              'image': function (value) {\n                if (value) {\n                  // 触发上传插件\n                  document.querySelector('.Quill-uploader .el-upload__input').click();\n                } else {\n                  this.quill.format('image', false);\n                }\n              }\n            }\n          },\n          syntax: {\n            highlight: text => {\n              return hljs.highlightAuto(text).value; // 这里就是代码高亮需要配置的地方 \n            }\n          }\n        }\n      },\n      formLabelWidth: '80px',\n      form: {\n        title: \"\",\n        type: \"0\",\n        state: \"0\",\n        content: \"\"\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  props: ['updateNoticeVisible', 'updateId'],\n  methods: {\n    submit() {\n      this.$refs[\"ruleForm\"].validate(valid => {\n        if (valid) {\n          editAccount(this.form).then(res => {\n            if (res.code == 1000) {\n              this.$notify.success({\n                title: '成功',\n                message: \"保存成功\"\n              });\n              this.handleClose();\n            } else {\n              this.$notify.error({\n                title: '错误',\n                message: res.message\n              });\n            }\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    handleClose() {\n      this.$emit(\"updateNoticeFalse\");\n    },\n    handleQillSuccess(res) {\n      let _this = this;\n      if (res.code == 1000) {\n        _this.$notify({\n          title: '上传成功',\n          type: 'success'\n        });\n        let imgurl = this.$store.state.configure.HOST + res.message;\n        let quill = this.$refs.myQuillEditor.quill;\n        let position = quill.getSelection().index;\n        quill.insertEmbed(position, 'image', imgurl);\n        quill.setSelection(position + 1);\n      } else {\n        _this.$notify({\n          title: '上传失败',\n          type: 'error'\n        });\n      }\n    }\n  },\n  watch: {\n    updateId(newVal) {\n      if (newVal) {\n        getAccountById({\n          id: newVal\n        }).then(res => {\n          if (res.code == 1000) {\n            this.form = res.data;\n            this.form.type = res.data.type + \"\";\n            this.form.state = res.data.state + \"\";\n          } else {\n            this.$notify.error({\n              title: '错误',\n              message: res.message\n            });\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["mixin","editAccount","getAccountById","mixins","data","editorOption","placeholder","modules","toolbar","container","header","list","script","indent","direction","size","color","background","font","align","handlers","image","value","document","querySelector","click","quill","format","syntax","highlight","text","hljs","highlightAuto","formLabelWidth","form","title","type","state","content","rules","required","message","trigger","props","methods","submit","$refs","validate","valid","then","res","code","$notify","success","handleClose","error","$emit","handleQillSuccess","_this","imgurl","$store","configure","HOST","myQuillEditor","position","getSelection","index","insertEmbed","setSelection","watch","updateId","newVal","id"],"sources":["src/components/system/notice/updateNotice.vue"],"sourcesContent":["<template>\n<div>\n  <el-dialog title=\"编辑通知公告\" width=\"40%\" :destroy-on-close=\"true\" :visible.sync=\"updateNoticeVisible\" :before-close=\"handleClose\">\n    <el-form :model=\"form\" :rules=\"rules\" ref=\"ruleForm\">\n      <el-row :gutter=\"10\">\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\">\n            <span class=\"search-title\">\n                标题:\n                </span>\n            <el-form-item prop=\"title\" style=\"margin-bottom:0\">\n                <el-input v-model=\"form.title\" size=\"mini\" placeholder=\"请输入标题\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n        </el-col>\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\">\n            <span class=\"search-title\">公告类型:</span>\n            <el-form-item prop=\"type\" style=\"margin-bottom:0\">\n              <el-select size=\"mini\" v-model=\"form.type\" placeholder=\"请选择\">\n                <el-option label=\"公告\" value=\"0\"></el-option>\n                <el-option label=\"通知\" value=\"1\"></el-option>\n              </el-select>\n            </el-form-item>\n        </el-col>\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"12\" :lg=\"12\" :xl=\"12\">\n            <span class=\"search-title\">状态:</span>\n             <el-form-item prop=\"state\" style=\"margin-bottom:0\">\n                <el-radio-group style=\"margin-top:1px;height:40px;display:flex;align-items: center\" v-model=\"form.state\">\n                  <el-radio label=\"0\">正常</el-radio>\n                  <el-radio label=\"1\">关闭</el-radio>\n                </el-radio-group>\n            </el-form-item>\n        </el-col>\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"24\" :xl=\"24\">\n            <span class=\"search-title\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容:</span>\n            <quill-editor ref=\"myQuillEditor\" :options=\"editorOption\"\n            v-model=\"form.content\"/>\n            <el-upload class=\"Quill-uploader\" :show-file-list=\"false\" accept=\"image/*\" v-show=\"0\" ref=\"updateUpload\" :multiple=\"false\" :action=\"uploadImageUrl()\"\n                :on-success=\"handleQillSuccess\">\n            </el-upload>\n        </el-col>\n      </el-row>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button size=\"mini\" type=\"primary\" @click=\"submit\">确 定</el-button>\n      <el-button size=\"mini\" @click=\"handleClose\">取 消</el-button>\n    </div>\n  </el-dialog>\n</div>\n</template>\n\n<script>\n  import { mixin } from '../../../minix/index';\n  import {editAccount,getAccountById} from '../../../api/api'\n  export default {\n    mixins: [mixin],\n    data() {\n      return{\n        editorOption: {\n          placeholder: \"请输入文字内容\",\n          modules: { \n            toolbar: {\n                container: [\n                    [\"bold\", \"italic\", \"underline\", \"strike\"], \n                    [\"blockquote\", \"code-block\"], \n                    [{ header: 1 }, { header: 2 }], \n                    [{ list: \"ordered\" }, { list: \"bullet\" }], \n                    [{ script: \"sub\" }, { script: \"super\" }], \n                    [{ indent: \"-1\" }, { indent: \"+1\" }], \n                    [{ direction: \"rtl\" }], \n                    [{ size: [\"small\", false, \"large\", \"huge\"] }], \n                    [{ header: [1, 2, 3, 4, 5, 6, false] }], \n                    [{ color: [] }, { background: [] }], \n                    [{ font: [] }], [{ align: [] }], \n                    [\"clean\"], [\"image\"]\n                ],\n                handlers: {\n                    'image': function ( value ) {\n                        if ( value ) {\n                            // 触发上传插件\n                            document.querySelector('.Quill-uploader .el-upload__input').click()\n                        } else {\n                            this.quill.format( 'image', false );\n                        }\n                    }\n                }\n            },\n            syntax: { \n                highlight: text => { \n                    return hljs.highlightAuto(text).value; // 这里就是代码高亮需要配置的地方 \n                }\n            }\n          }\n        },\n        formLabelWidth: '80px',\n        form: {\n          title: \"\",\n          type: \"0\",\n          state: \"0\",\n          content: \"\",\n        },\n        rules: {\n          title: [\n            { required: true, message: '请输入标题', trigger: 'blur' },\n          ],\n        },\n      }\n    },\n    props: ['updateNoticeVisible','updateId'],\n    methods: {\n      submit() {\n        this.$refs[\"ruleForm\"].validate((valid) => {\n          if (valid) {\n            editAccount(this.form).then(res => {\n              if(res.code == 1000) {\n                this.$notify.success({\n                  title: '成功',\n                  message: \"保存成功\"\n                });\n                this.handleClose();\n              } else {\n                this.$notify.error({\n                  title: '错误',\n                  message: res.message\n                });\n              }\n            })\n          } else {\n            return false;\n          }\n        });\n      },\n      handleClose() {\n        this.$emit(\"updateNoticeFalse\")\n      },\n      handleQillSuccess(res){\n        let _this = this;\n        if(res.code == 1000){\n            _this.$notify({\n                title: '上传成功',\n                type: 'success'\n            });\n            let imgurl = this.$store.state.configure.HOST + res.message\n            let quill = this.$refs.myQuillEditor.quill\n            let position = quill.getSelection().index\n            quill.insertEmbed(position, 'image', imgurl)\n            quill.setSelection(position + 1)\n        }else{\n            _this.$notify({\n                title: '上传失败',\n                type: 'error'\n            });\n        }\n      },\n    },\n    watch: {\n      updateId(newVal) {\n        if(newVal) {\n          getAccountById({id:newVal}).then(res => {\n            if(res.code == 1000) {\n              this.form = res.data\n              this.form.type = res.data.type + \"\"\n              this.form.state = res.data.state + \"\"\n            } else {\n              this.$notify.error({\n                title: '错误',\n                message: res.message\n              });\n            }\n          })\n        }\n      }\n    }\n }\n</script>\n\n<style   scoped>\n  .el-col {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      margin-top: 12px\n  }\n  .search-title {\n      font-family: '黑体';\n      float: right;\n      white-space: nowrap;\n      font-size: 14px;\n      width: 84px;\n      text-align: right;\n  }\n  .el-tree {\n      border: 1px solid #BDC1C9;\n  }\n  ::v-deep .ql-editor {\n    min-height: 150px !important;\n  }\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}