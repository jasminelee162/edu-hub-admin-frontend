{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { uploadTemplate, getTemplates, deleteTemplate, getTemplateContent } from '../../../api/api';\nimport { renderAsync } from 'docx-preview';\nexport default {\n  data() {\n    return {\n      loading: true,\n      selected: [],\n      search: {\n        name: \"\",\n        dateRange: [],\n        pageNumber: 1,\n        pageSize: 10\n      },\n      total: 0,\n      tableData: []\n    };\n  },\n  methods: {\n    // 表格头部样式\n    tableHeaderStyle() {\n      return {\n        'color': '#1E2B45',\n        'background-color': '#F0F4F8',\n        'font-weight': '600',\n        'border-bottom': '1px solid #D1E0FF'\n      };\n    },\n    // 表格行样式\n    tableRowStyle() {\n      return {\n        'color': '#2C3E50',\n        'font-size': '14px',\n        'border-bottom': '1px solid #F0F4F8'\n      };\n    },\n    // 上传前校验\n    beforeUpload(file) {\n      const isLt10M = file.size / 1024 / 1024 < 10;\n      if (!isLt10M) {\n        this.$message.error('上传文件大小不能超过10MB!');\n        return false;\n      }\n\n      // 检查文件类型\n      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'image/jpeg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        this.$message.error('只支持上传PDF、Word、Excel、PPT、JPG和PNG文件!');\n        return false;\n      }\n      return true;\n    },\n    // 文件上传方法（完整实现）\n    uploadFile({\n      file,\n      onProgress,\n      onSuccess,\n      onError\n    }) {\n      const formData = new FormData();\n      formData.append('file', file); // ✅ 关键点：必须是 file\n\n      uploadTemplate(formData, {\n        // headers: { 'Content-Type': 'multipart/form-data' },\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          onProgress({\n            percent: percentCompleted\n          }); // 支持进度条\n        }\n      }).then(res => {\n        if (res.code === 1000) {\n          this.$notify.success({\n            title: '成功',\n            message: '上传成功'\n          });\n          this.query();\n          onSuccess(res); // ✅ 必须回调成功\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '上传失败'\n          });\n          onError(new Error(res.message || '上传失败')); // ✅ 回调失败\n        }\n      }).catch(error => {\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '上传失败'\n        });\n        onError(error); // ✅ 回调失败\n      });\n    },\n    // 查看内容 在线预览docx\n    viewContent(id) {\n      this.loading = true;\n      getTemplateContent({\n        id\n      }).then(res => {\n        this.loading = false;\n        if (res.code !== 1000) {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '获取内容失败'\n          });\n          return;\n        }\n        const template = this.tableData.find(item => item.id === id);\n        const data = res.data;\n\n        // 调试日志\n        console.log('当前文件数据:', {\n          templateData: template,\n          responseData: data\n        });\n\n        // 获取文件类型（优先从响应数据获取，其次从表格数据）\n        const fileType = (data.fileType || template?.fileType || '').toString().toLowerCase().replace('.', '').trim();\n        if (!data.fileContent) {\n          this.$message.error('文件内容为空');\n          return;\n        }\n        if (!fileType) {\n          this.$alert('无法识别文件类型，请下载查看', '提示', {\n            confirmButtonText: '下载',\n            callback: () => this.downloadFile(id)\n          });\n          return;\n        }\n        const mimeType = this.getMimeType(fileType);\n        console.log('最终识别类型:', {\n          fileType,\n          mimeType\n        });\n        try {\n          const blob = this.base64ToBlob(data.fileContent, mimeType);\n\n          // 预览处理\n          if (['pdf'].includes(fileType)) {\n            window.open(URL.createObjectURL(blob), '_blank');\n          } else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileType)) {\n            const imgWindow = window.open('', '_blank');\n            imgWindow.document.write(`<img src=\"${URL.createObjectURL(blob)}\" style=\"max-width:100%\"/>`);\n          } else if (fileType === 'docx') {\n            this.showDocx(data.fileContent);\n          } else {\n            this.$alert(`不支持预览 ${fileType} 格式文件`, '提示', {\n              confirmButtonText: '下载',\n              callback: () => this.downloadFile(id)\n            });\n          }\n        } catch (e) {\n          console.error('预览处理出错:', e);\n          this.$notify.error({\n            title: '错误',\n            message: '文件处理失败: ' + e.message\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        console.error('请求出错:', error);\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '获取内容失败'\n        });\n      });\n    },\n    //文件二进制转化\n    base64ToBlob(base64Data, mimeType = '') {\n      // 移除可能存在的Base64前缀\n      const base64WithoutPrefix = base64Data.replace(/^data:\\w+\\/\\w+;base64,/, '');\n      const byteCharacters = atob(base64WithoutPrefix);\n      const byteArrays = [];\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n        const slice = byteCharacters.slice(offset, offset + 512);\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n        byteArrays.push(new Uint8Array(byteNumbers));\n      }\n      return new Blob(byteArrays, {\n        type: mimeType\n      });\n    },\n    getMimeType(fileType) {\n      const map = {\n        pdf: 'application/pdf',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        png: 'image/png',\n        txt: 'text/plain',\n        doc: 'application/msword',\n        docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        ppt: 'application/vnd.ms-powerpoint',\n        pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n        xls: 'application/vnd.ms-excel',\n        xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        gif: 'image/gif',\n        svg: 'image/svg+xml',\n        mp4: 'video/mp4',\n        webm: 'video/webm'\n      };\n      return map[fileType] || 'application/octet-stream';\n    },\n    //pptx excel docx预览\n    showDocx(fileContentBase64) {\n      const blob = this.base64ToBlob(fileContentBase64, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');\n      const container = document.createElement('div');\n      container.style.cssText = `\n        width: 100%;\n        height: 90vh;\n        margin: 0 auto;\n        overflow: auto;\n        padding: 20px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.1);\n      `;\n\n      // 创建新窗口\n      const win = window.open('', '_blank');\n      win.document.title = '文档预览';\n      win.document.body.style.margin = '0';\n      win.document.body.appendChild(container);\n\n      // 添加加载状态\n      container.innerHTML = '<div style=\"text-align:center;padding:50px\">正在加载文档...</div>';\n      renderAsync(blob, container, null, {\n        className: \"docx-viewer\",\n        // 添加自定义class\n        inWrapper: true,\n        // 启用包裹容器\n        ignoreWidth: false,\n        ignoreHeight: false,\n        ignoreFonts: false\n      }).catch(error => {\n        console.error('DOCX渲染失败:', error);\n        container.innerHTML = '<div style=\"color:red\">文档预览失败，请下载后查看</div>';\n      });\n    },\n    // 下载文件\n    downloadFile(id) {\n      this.loading = true;\n      getTemplateContent({\n        id\n      }).then(res => {\n        this.loading = false;\n        if (res.code === 1000) {\n          const template = this.tableData.find(item => item.id === id);\n          const base64 = res.data.fileContent;\n          const mimeType = this.getMimeType(template.fileType);\n          const blob = this.base64ToBlob(base64, mimeType);\n          const url = URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = template.name || 'download';\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          URL.revokeObjectURL(url);\n          this.$notify.success({\n            title: '成功',\n            message: '文件下载已开始',\n            duration: 2000\n          });\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '下载失败'\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '下载失败'\n        });\n      });\n    },\n    // 搜索\n    searchPage() {\n      this.search.pageNumber = 1;\n      this.query();\n    },\n    // 查询数据\n    query() {\n      this.loading = true;\n      const params = {\n        ...this.search,\n        startDate: this.search.dateRange ? this.search.dateRange[0] : '',\n        endDate: this.search.dateRange ? this.search.dateRange[1] : ''\n      };\n      delete params.dateRange;\n      getTemplates(params).then(res => {\n        this.loading = false;\n        if (res.code === 1000) {\n          this.tableData = res.data.records || [];\n          this.total = res.data.total || 0;\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '获取数据失败'\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '获取数据失败'\n        });\n      });\n    },\n    // 重置搜索\n    refresh() {\n      this.search.name = \"\";\n      this.search.dateRange = [];\n      this.query();\n    },\n    // 分页变化\n    handleCurrentChange(val) {\n      this.search.pageNumber = val;\n      this.query();\n    },\n    // 每页条数变化\n    handleSizeChange(val) {\n      this.search.pageSize = val;\n      this.query();\n    },\n    // 选择变化\n    handleSelectionChange(val) {\n      this.selected = val.map(item => item.id);\n    },\n    // 批量删除\n    deleteDataBtn() {\n      if (this.selected.length === 0) {\n        this.$message.warning('请至少选择一条数据');\n        return;\n      }\n      this.$confirm(`确定删除选中的 ${this.selected.length} 条数据?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        customClass: 'tech-message-box',\n        beforeClose: (action, instance, done) => {\n          if (action === 'confirm') {\n            instance.confirmButtonLoading = true;\n            this.deleteData(this.selected) // 直接传递数组\n            .finally(() => {\n              instance.confirmButtonLoading = false;\n              done();\n            });\n          } else {\n            done();\n          }\n        }\n      }).catch(() => {\n        this.$message.info('已取消删除');\n      });\n    },\n    // 删除数据\n    deleteData(ids) {\n      // 确保ids是数组格式\n      const idsArray = Array.isArray(ids) ? ids : [ids];\n      return deleteTemplate(idsArray).then(res => {\n        if (res.code === 1000) {\n          this.$message({\n            type: 'success',\n            message: '删除成功!',\n            customClass: 'tech-message',\n            duration: 2000\n          });\n          this.search.pageNumber = 1;\n          this.query();\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '删除失败'\n          });\n        }\n      }).catch(error => {\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '删除失败'\n        });\n      });\n    }\n  },\n  mounted() {\n    this.query();\n  }\n};","map":{"version":3,"names":["uploadTemplate","getTemplates","deleteTemplate","getTemplateContent","renderAsync","data","loading","selected","search","name","dateRange","pageNumber","pageSize","total","tableData","methods","tableHeaderStyle","tableRowStyle","beforeUpload","file","isLt10M","size","$message","error","allowedTypes","includes","type","uploadFile","onProgress","onSuccess","onError","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","percent","then","res","code","$notify","success","title","message","query","Error","catch","viewContent","id","template","find","item","console","log","templateData","responseData","fileType","toString","toLowerCase","replace","trim","fileContent","$alert","confirmButtonText","callback","downloadFile","mimeType","getMimeType","blob","base64ToBlob","window","open","URL","createObjectURL","imgWindow","document","write","showDocx","e","base64Data","base64WithoutPrefix","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","push","Uint8Array","Blob","map","pdf","jpg","jpeg","png","txt","doc","docx","ppt","pptx","xls","xlsx","gif","svg","mp4","webm","fileContentBase64","container","createElement","style","cssText","win","body","margin","appendChild","innerHTML","className","inWrapper","ignoreWidth","ignoreHeight","ignoreFonts","base64","url","link","href","download","click","removeChild","revokeObjectURL","duration","searchPage","params","startDate","endDate","records","refresh","handleCurrentChange","val","handleSizeChange","handleSelectionChange","deleteDataBtn","warning","$confirm","cancelButtonText","customClass","beforeClose","action","instance","done","confirmButtonLoading","deleteData","finally","info","ids","idsArray","isArray","mounted"],"sources":["src/views/system/user/user.vue"],"sourcesContent":["<template>\n  <div class=\"template-management\">\n    <!-- 搜索区域 -->\n    <div class=\"search-panel\">\n      <el-row :gutter=\"15\">\n        <!-- 资料名称搜索 -->\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"8\" :xl=\"8\">\n          <div class=\"search-item\">\n            <span class=\"search-title\">\n              <i class=\"el-icon-document\"></i> 资料名称:\n            </span>\n            <el-input\n              size=\"small\"\n              placeholder=\"请输入资料名称\"\n              v-model=\"search.name\"\n              class=\"tech-input\">\n              <i slot=\"prefix\" class=\"el-icon-edit-outline\"></i>\n            </el-input>\n          </div>\n        </el-col>\n        \n        <!-- 创建时间搜索 -->\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"8\" :xl=\"8\">\n          <div class=\"search-item\">\n            <span class=\"search-title\">\n              <i class=\"el-icon-date\"></i> 创建时间:\n            </span>\n            <el-date-picker\n              size=\"small\"\n              v-model=\"search.dateRange\"\n              type=\"daterange\"\n              range-separator=\"至\"\n              start-placeholder=\"开始日期\"\n              end-placeholder=\"结束日期\"\n              value-format=\"yyyy-MM-dd\"\n              class=\"tech-date-picker\">\n            </el-date-picker>\n          </div>\n        </el-col>\n        \n        <!-- 操作按钮 -->\n        <el-col :xs=\"24\" :sm=\"12\" :md=\"8\" :lg=\"8\" :xl=\"8\">\n          <div class=\"search-actions\">\n            <el-button \n              size=\"small\" \n              icon=\"el-icon-search\" \n              type=\"primary\" \n              @click=\"searchPage\"\n              class=\"search-btn\">\n              查询\n            </el-button>\n            <el-button \n              size=\"small\" \n              icon=\"el-icon-refresh\" \n              @click=\"refresh\"\n              class=\"reset-btn\">\n              重置\n            </el-button>\n          </div>\n        </el-col>\n      </el-row>\n    </div>\n    \n    <!-- 数据面板 -->\n    <div class=\"data-panel\">\n      <!-- 操作栏 -->\n      <div class=\"action-bar\">\n        <el-upload\n          class=\"upload-btn\"\n          action=\"\"\n          :show-file-list=\"false\"\n          :before-upload=\"beforeUpload\"\n          :http-request=\"uploadFile\">\n          <el-button \n            type=\"primary\" \n            size=\"small\" \n            icon=\"el-icon-upload\"\n            class=\"action-btn upload-btn\">\n            上传资料\n          </el-button>\n        </el-upload>\n        <el-button \n          type=\"danger\" \n          size=\"small\" \n          icon=\"el-icon-delete\" \n          :disabled=\"selected.length <= 0\"\n          @click=\"deleteDataBtn\"\n          class=\"action-btn delete-btn\">\n          批量删除\n        </el-button>\n      </div>\n      \n      <!-- 数据表格 -->\n      <el-table\n        v-loading=\"loading\"\n        :data=\"tableData\"\n        :header-cell-style=\"tableHeaderStyle\"\n        :row-style=\"tableRowStyle\"\n        @selection-change=\"handleSelectionChange\"\n        stripe\n        class=\"tech-table\">\n        <!-- 选择列 -->\n        <el-table-column\n          type=\"selection\"\n          width=\"55\"\n          align=\"center\">\n        </el-table-column>\n        \n        <!-- 资料名称列 -->\n        <el-table-column\n          prop=\"name\"\n          label=\"资料名称\"\n          min-width=\"200\">\n          <template #default=\"{row}\">\n            <div class=\"name-cell\">\n              <i class=\"el-icon-document\"></i>\n              <span>{{ row.name }}</span>\n            </div>\n          </template>\n        </el-table-column>\n        \n        <!-- 创建时间列 -->\n        <el-table-column\n          prop=\"createdAt\"\n          label=\"创建时间\"\n          width=\"180\">\n          <template #default=\"{row}\">\n            <div class=\"time-cell\">\n              <i class=\"el-icon-time\"></i>\n              <span>{{ row.createdAt }}</span>\n            </div>\n          </template>\n        </el-table-column>\n        \n        <!-- 操作列 -->\n        <el-table-column\n          label=\"操作\"\n          width=\"300\"\n          fixed=\"right\">\n          <template #default=\"{row}\">\n            <div class=\"action-buttons\">\n              <el-button \n                size=\"mini\" \n                type=\"primary\" \n                @click=\"viewContent(row.id)\"\n                class=\"action-btn view-btn\">\n                <i class=\"el-icon-view\"></i> 查看\n              </el-button>\n              \n              <el-button \n                size=\"mini\" \n                type=\"success\" \n                @click=\"downloadFile(row.id)\"\n                class=\"action-btn download-btn\">\n                <i class=\"el-icon-download\"></i> 下载\n              </el-button>\n              \n              <el-popconfirm\n                title=\"确认删除此资料？\"\n                @confirm=\"deleteData(row.id)\"\n                confirm-button-text=\"确认\"\n                cancel-button-text=\"取消\"\n                icon=\"el-icon-warning\"\n                icon-color=\"#409EFF\">\n                <el-button \n                  size=\"mini\"\n                  type=\"danger\"\n                  slot=\"reference\"\n                  class=\"action-btn delete-btn\">\n                  <i class=\"el-icon-delete\"></i> 删除\n                </el-button>\n              </el-popconfirm>\n            </div>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <!-- 分页 -->\n      <el-pagination\n        background\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        :page-size=\"search.pageSize\"\n        :current-page=\"search.pageNumber\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :total=\"total\"\n        class=\"tech-pagination\">\n      </el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { uploadTemplate, getTemplates, deleteTemplate, getTemplateContent } from '../../../api/api'\nimport { renderAsync } from 'docx-preview'\n\nexport default {\n  data() {\n    return {\n      loading: true,\n      selected: [],\n      search: {\n        name: \"\",\n        dateRange: [],\n        pageNumber: 1,\n        pageSize: 10\n      },\n      total: 0,\n      tableData: [],\n    }\n  },\n  methods: {\n    // 表格头部样式\n    tableHeaderStyle() {\n      return {\n        'color': '#1E2B45',\n        'background-color': '#F0F4F8',\n        'font-weight': '600',\n        'border-bottom': '1px solid #D1E0FF'\n      }\n    },\n    \n    // 表格行样式\n    tableRowStyle() {\n      return {\n        'color': '#2C3E50',\n        'font-size': '14px',\n        'border-bottom': '1px solid #F0F4F8'\n      }\n    },\n    \n    // 上传前校验\n    beforeUpload(file) {\n      const isLt10M = file.size / 1024 / 1024 < 10\n      if (!isLt10M) {\n        this.$message.error('上传文件大小不能超过10MB!')\n        return false\n      }\n      \n      // 检查文件类型\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-powerpoint',\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n        'image/jpeg',\n        'image/png'\n      ]\n      \n      if (!allowedTypes.includes(file.type)) {\n        this.$message.error('只支持上传PDF、Word、Excel、PPT、JPG和PNG文件!')\n        return false\n      }\n      \n      return true\n    },\n    \n    // 文件上传方法（完整实现）\n    uploadFile({ file, onProgress, onSuccess, onError }) {\n      const formData = new FormData();\n      formData.append('file', file); // ✅ 关键点：必须是 file\n\n      uploadTemplate(formData, {\n        // headers: { 'Content-Type': 'multipart/form-data' },\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          onProgress({ percent: percentCompleted }); // 支持进度条\n        }\n      }).then(res => {\n        if (res.code === 1000) {\n          this.$notify.success({ title: '成功', message: '上传成功' });\n          this.query();\n          onSuccess(res); // ✅ 必须回调成功\n        } else {\n          this.$notify.error({ title: '错误', message: res.message || '上传失败' });\n          onError(new Error(res.message || '上传失败')); // ✅ 回调失败\n        }\n      }).catch(error => {\n        this.$notify.error({ title: '错误', message: error.message || '上传失败' });\n        onError(error); // ✅ 回调失败\n      });\n    },\n    \n    // 查看内容 在线预览docx\n    viewContent(id) {\n      this.loading = true;\n      getTemplateContent({ id }).then(res => {\n        this.loading = false;\n        \n        if (res.code !== 1000) {\n          this.$notify.error({ title: '错误', message: res.message || '获取内容失败' });\n          return;\n        }\n\n        const template = this.tableData.find(item => item.id === id);\n        const data = res.data;\n\n        // 调试日志\n        console.log('当前文件数据:', {\n          templateData: template,\n          responseData: data\n        });\n\n        // 获取文件类型（优先从响应数据获取，其次从表格数据）\n        const fileType = (data.fileType || template?.fileType || '')\n                        .toString()\n                        .toLowerCase()\n                        .replace('.', '')\n                        .trim();\n\n        if (!data.fileContent) {\n          this.$message.error('文件内容为空');\n          return;\n        }\n\n        if (!fileType) {\n          this.$alert('无法识别文件类型，请下载查看', '提示', {\n            confirmButtonText: '下载',\n            callback: () => this.downloadFile(id)\n          });\n          return;\n        }\n\n        const mimeType = this.getMimeType(fileType);\n        console.log('最终识别类型:', { fileType, mimeType });\n\n        try {\n          const blob = this.base64ToBlob(data.fileContent, mimeType);\n          \n          // 预览处理\n          if (['pdf'].includes(fileType)) {\n            window.open(URL.createObjectURL(blob), '_blank');\n          } \n          else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileType)) {\n            const imgWindow = window.open('', '_blank');\n            imgWindow.document.write(`<img src=\"${URL.createObjectURL(blob)}\" style=\"max-width:100%\"/>`);\n          }\n          else if (fileType === 'docx') {\n            this.showDocx(data.fileContent);\n          }\n          else {\n            this.$alert(`不支持预览 ${fileType} 格式文件`, '提示', {\n              confirmButtonText: '下载',\n              callback: () => this.downloadFile(id)\n            });\n          }\n        } catch (e) {\n          console.error('预览处理出错:', e);\n          this.$notify.error({\n            title: '错误',\n            message: '文件处理失败: ' + e.message\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        console.error('请求出错:', error);\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '获取内容失败'\n        });\n      });\n    },\n\n\n\n    //文件二进制转化\n    base64ToBlob(base64Data, mimeType = '') {\n        // 移除可能存在的Base64前缀\n      const base64WithoutPrefix = base64Data.replace(/^data:\\w+\\/\\w+;base64,/, '');\n      const byteCharacters = atob(base64WithoutPrefix);\n      const byteArrays = [];\n\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n        const slice = byteCharacters.slice(offset, offset + 512);\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n        byteArrays.push(new Uint8Array(byteNumbers));\n      }\n\n      return new Blob(byteArrays, { type: mimeType });\n    },\n\n    getMimeType(fileType) {\n      const map = {\n        pdf: 'application/pdf',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        png: 'image/png',\n        txt: 'text/plain',\n        doc: 'application/msword',\n        docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        ppt: 'application/vnd.ms-powerpoint',\n        pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n        xls: 'application/vnd.ms-excel',\n        xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        gif: 'image/gif',\n        svg: 'image/svg+xml',\n        mp4: 'video/mp4',\n        webm: 'video/webm'\n      };\n      return map[fileType] || 'application/octet-stream';\n    },\n\n\n    //pptx excel docx预览\n    showDocx(fileContentBase64) {\n      const blob = this.base64ToBlob(\n        fileContentBase64, \n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      );\n      \n      const container = document.createElement('div');\n      container.style.cssText = `\n        width: 100%;\n        height: 90vh;\n        margin: 0 auto;\n        overflow: auto;\n        padding: 20px;\n        box-shadow: 0 0 10px rgba(0,0,0,0.1);\n      `;\n      \n      // 创建新窗口\n      const win = window.open('', '_blank');\n      win.document.title = '文档预览';\n      win.document.body.style.margin = '0';\n      win.document.body.appendChild(container);\n      \n      // 添加加载状态\n      container.innerHTML = '<div style=\"text-align:center;padding:50px\">正在加载文档...</div>';\n      \n      renderAsync(blob, container, null, {\n        className: \"docx-viewer\", // 添加自定义class\n        inWrapper: true,         // 启用包裹容器\n        ignoreWidth: false,\n        ignoreHeight: false,\n        ignoreFonts: false\n      }).catch(error => {\n        console.error('DOCX渲染失败:', error);\n        container.innerHTML = '<div style=\"color:red\">文档预览失败，请下载后查看</div>';\n      });\n    },\n\n\n    \n    // 下载文件\n    downloadFile(id) {\n      this.loading = true;\n      getTemplateContent({ id }).then(res => {\n        this.loading = false;\n        if (res.code === 1000) {\n          const template = this.tableData.find(item => item.id === id);\n          const base64 = res.data.fileContent;\n          const mimeType = this.getMimeType(template.fileType);\n          const blob = this.base64ToBlob(base64, mimeType);\n          const url = URL.createObjectURL(blob);\n          \n          const link = document.createElement('a');\n          link.href = url;\n          link.download = template.name || 'download';\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          URL.revokeObjectURL(url);\n          \n          this.$notify.success({\n            title: '成功',\n            message: '文件下载已开始',\n            duration: 2000\n          });\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '下载失败'\n          });\n        }\n      }).catch(error => {\n        this.loading = false;\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '下载失败'\n        });\n      });\n    },\n\n    \n    // 搜索\n    searchPage() {\n      this.search.pageNumber = 1\n      this.query()\n    },\n    \n    // 查询数据\n    query() {\n      this.loading = true\n      const params = {\n        ...this.search,\n        startDate: this.search.dateRange ? this.search.dateRange[0] : '',\n        endDate: this.search.dateRange ? this.search.dateRange[1] : ''\n      }\n      delete params.dateRange\n      \n      getTemplates(params).then(res => {\n        this.loading = false\n        if (res.code === 1000) {\n          this.tableData = res.data.records || []\n          this.total = res.data.total || 0\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '获取数据失败'\n          })\n        }\n      }).catch(error => {\n        this.loading = false\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '获取数据失败'\n        })\n      })\n    },\n    \n    // 重置搜索\n    refresh() {\n      this.search.name = \"\"\n      this.search.dateRange = []\n      this.query()\n    },\n    \n    // 分页变化\n    handleCurrentChange(val) {\n      this.search.pageNumber = val\n      this.query()\n    },\n    \n    // 每页条数变化\n    handleSizeChange(val) {\n      this.search.pageSize = val\n      this.query()\n    },\n    \n    // 选择变化\n    handleSelectionChange(val) {\n      this.selected = val.map(item => item.id)\n    },\n    \n    // 批量删除\n    deleteDataBtn() {\n      if (this.selected.length === 0) {\n        this.$message.warning('请至少选择一条数据')\n        return\n      }\n      \n      this.$confirm(`确定删除选中的 ${this.selected.length} 条数据?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        customClass: 'tech-message-box',\n        beforeClose: (action, instance, done) => {\n          if (action === 'confirm') {\n            instance.confirmButtonLoading = true\n            this.deleteData(this.selected)  // 直接传递数组\n              .finally(() => {\n                instance.confirmButtonLoading = false\n                done()\n              })\n          } else {\n            done()\n          }\n        }\n      }).catch(() => {\n        this.$message.info('已取消删除')\n      })\n    },\n    \n    // 删除数据\n    deleteData(ids) {\n      // 确保ids是数组格式\n      const idsArray = Array.isArray(ids) ? ids : [ids];\n      \n      return deleteTemplate(idsArray).then(res => {\n        if (res.code === 1000) {\n          this.$message({\n            type: 'success',\n            message: '删除成功!',\n            customClass: 'tech-message',\n            duration: 2000\n          })\n          this.search.pageNumber = 1\n          this.query()\n        } else {\n          this.$notify.error({\n            title: '错误',\n            message: res.message || '删除失败'\n          })\n        }\n      }).catch(error => {\n        this.$notify.error({\n          title: '错误',\n          message: error.message || '删除失败'\n        })\n      })\n    },\n  },\n\n  \n  mounted() {\n    this.query()\n  }\n}\n</script>\n\n<style scoped>\n.template-management {\n  padding: 20px;\n  background-color: #fff;\n}\n\n.search-panel {\n  background: #fff;\n  border-radius: 8px;\n  padding: 15px;\n  margin-bottom: 20px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  border: 1px solid #EBEEF5;\n}\n\n.search-item {\n  display: flex;\n  flex-direction: column;\n}\n\n.search-title {\n  font-size: 14px;\n  color: #1E2B45;\n  margin-bottom: 8px;\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n}\n\n.search-title i {\n  margin-right: 6px;\n  color: #409EFF;\n}\n\n.search-actions {\n  display: flex;\n  align-items: flex-end;\n  height: 100%;\n}\n\n.data-panel {\n  background: #fff;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  border: 1px solid #EBEEF5;\n}\n\n.action-bar {\n  padding: 10px 0 15px 0;\n  margin-bottom: 15px;\n  display: flex;\n  gap: 10px;\n}\n\n.name-cell, .time-cell {\n  display: flex;\n  align-items: center;\n}\n\n.name-cell i {\n  color: #409EFF;\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n.time-cell i {\n  color: #909399;\n  margin-right: 8px;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 6px;\n}\n\n.action-btn {\n  border-radius: 4px;\n  padding: 6px 10px;\n  font-size: 12px;\n  min-width: 60px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  border: none;\n}\n\n.action-btn i {\n  margin-right: 4px;\n  font-size: 14px;\n}\n\n.upload-btn {\n  margin-right: 0;\n}\n</style>\n\n<style>\n/* 全局样式 */\n.tech-input .el-input__inner {\n  border-radius: 4px;\n  border: 1px solid #DCDFE6;\n  color: #1E2B45;\n  background-color: #fff;\n  padding-left: 30px;\n  transition: all 0.3s;\n}\n\n.tech-input .el-input__inner:focus {\n  border-color: #409EFF;\n  box-shadow: 0 0 0 2px rgba(64, 158, 255, 0.1);\n}\n\n.tech-input .el-input__prefix {\n  left: 5px;\n  color: #409EFF;\n}\n\n.tech-date-picker .el-input__inner {\n  border-radius: 4px;\n  border: 1px solid #DCDFE6;\n  color: #1E2B45;\n  background-color: #fff;\n}\n\n.tech-date-picker .el-range-separator {\n  color: #606266;\n}\n\n.search-btn {\n  background: linear-gradient(135deg, #409EFF, #3375B9);\n  border: none;\n  border-radius: 4px;\n  color: white;\n  padding: 7px 15px;\n  box-shadow: 0 2px 6px rgba(64, 158, 255, 0.3);\n}\n\n.reset-btn {\n  border-radius: 4px;\n  color: #409EFF;\n  border: 1px solid #DCDFE6;\n  padding: 7px 15px;\n  background: #fff;\n}\n\n.action-btn.upload-btn {\n  background: linear-gradient(135deg, #409EFF, #3375B9);\n  color: white;\n  box-shadow: 0 2px 6px rgba(64, 158, 255, 0.3);\n}\n\n.action-btn.view-btn {\n  background: linear-gradient(135deg, #409EFF, #3375B9);\n  color: white;\n  box-shadow: 0 2px 6px rgba(64, 158, 255, 0.3);\n}\n\n.action-btn.download-btn {\n  background: linear-gradient(135deg, #67C23A, #529B2E);\n  color: white;\n  box-shadow: 0 2px 6px rgba(103, 194, 58, 0.3);\n}\n\n.action-btn.delete-btn {\n  background: linear-gradient(135deg, #F56C6C, #D95454);\n  color: white;\n  box-shadow: 0 2px 6px rgba(245, 108, 108, 0.3);\n}\n\n.action-btn:hover {\n  transform: translateY(-1px);\n  opacity: 0.9;\n}\n\n.tech-table {\n  border-radius: 8px;\n  border: 1px solid #EBEEF5;\n}\n\n.tech-table .el-table__body tr:hover>td {\n  background-color: #F5F9FF !important;\n}\n\n.tech-pagination .el-pagination.is-background .el-pager li:not(.disabled).active {\n  background-color: #409EFF;\n  color: white;\n}\n\n.tech-pagination .el-pagination.is-background .el-pager li:hover {\n  color: #409EFF;\n}\n\n.tech-message-box {\n  border-radius: 8px;\n  border: 1px solid #409EFF;\n}\n\n.tech-message-box .el-message-box__title {\n  color: #1E2B45;\n  font-weight: 600;\n}\n\n.tech-message {\n  border-radius: 4px;\n  background-color: #fff;\n  box-shadow: 0 2px 12px 0 rgba(64, 158, 255, 0.2);\n}\n\n.tech-message .el-message__content {\n  color: #1E2B45;\n}\n\n.el-popconfirm__action {\n  text-align: center;\n}\n\n.el-popconfirm__action button {\n  border-radius: 4px;\n  padding: 6px 12px;\n}\n\n.el-popconfirm__action button:first-child {\n  background: linear-gradient(135deg, #409EFF, #3375B9);\n  border: none;\n  color: white;\n}\n\n.el-popconfirm__action button:last-child {\n  color: #409EFF;\n  border: 1px solid #DCDFE6;\n  background: #fff;\n}\n\n.el-tag {\n  display: inline-flex;\n  align-items: center;\n  padding: 0 8px;\n  height: 24px;\n  line-height: 24px;\n  border-radius: 4px;\n}\n\n.el-tag i {\n  margin-right: 4px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}