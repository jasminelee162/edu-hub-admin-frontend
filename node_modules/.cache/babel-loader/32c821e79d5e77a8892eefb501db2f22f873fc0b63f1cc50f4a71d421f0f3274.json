{"ast":null,"code":"import axios from 'axios';\nimport store from '@/store';\nimport { Message, MessageBox } from 'element-ui';\nimport router from '@/router';\n\n/**\r\n * 创建axios实例\r\n */\nconst instance = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:8080',\n  timeout: 15000,\n  // 请求超时时间\n  withCredentials: true // 允许携带cookie\n});\n\n/**\r\n * 不需要携带token的白名单接口\r\n * 完全匹配您后端的EmailController接口\r\n */\nconst NO_TOKEN_WHITELIST = ['/email/sendCode',\n// 发送验证码接口\n'/email/login',\n// 验证码登录接口\n'/auth/login',\n// 账号密码登录接口\n'/auth/captcha' // 验证码获取接口\n];\n\n/**\r\n * 需要特殊处理的错误码\r\n */\nconst AUTH_ERROR_CODES = {\n  1006: '登录凭证已过期',\n  1008: '请重新登录',\n  1009: '账号已被锁定',\n  1011: '登录状态无效'\n};\n\n/**\r\n * 请求拦截器\r\n */\ninstance.interceptors.request.use(config => {\n  // 1. 为GET请求添加随机参数防止缓存\n  if (config.method === 'get') {\n    config.params = {\n      ...config.params,\n      _t: Date.now()\n    };\n  }\n\n  // 2. 为POST请求添加时间戳（排除FormData）\n  if (config.method === 'post' && !(config.data instanceof FormData)) {\n    config.data = {\n      ...config.data,\n      _t: Date.now()\n    };\n  }\n\n  // 3. 白名单检查（精确匹配）\n  const requestPath = config.url.split('?')[0]; // 去除query参数\n  const isInWhitelist = NO_TOKEN_WHITELIST.some(path => requestPath.endsWith(path));\n\n  // 4. 非白名单请求添加token\n  if (!isInWhitelist) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['x_access_token'] = token;\n    } else {\n      // 未登录且访问需要认证的接口，跳转到登录页\n      if (router.currentRoute.path !== '/login') {\n        router.replace({\n          path: '/login',\n          query: {\n            redirect: router.currentRoute.fullPath\n          }\n        });\n      }\n      return Promise.reject(new Error('未登录或登录已过期'));\n    }\n  }\n  return config;\n}, error => {\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n/**\r\n * 响应拦截器\r\n */\ninstance.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 1. 请求成功（code=1000）\n  if (res.code === 1000) {\n    return res.data || res; // 统一返回格式\n  }\n\n  // 2. 认证相关错误处理\n  if (AUTH_ERROR_CODES[res.code]) {\n    handleAuthError(res.code);\n    return Promise.reject(res);\n  }\n\n  // 3. 其他业务错误\n  Message({\n    message: res.message || '请求失败',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(res);\n}, error => {\n  // 网络错误处理\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        handleAuthError(1008);\n        break;\n      case 403:\n        Message.error('没有操作权限');\n        break;\n      case 404:\n        Message.error('请求资源不存在');\n        break;\n      case 500:\n        Message.error('服务器内部错误');\n        break;\n      default:\n        Message.error(`网络错误: ${error.response.status}`);\n    }\n  } else if (error.request) {\n    Message.error('网络连接超时，请检查网络');\n  } else {\n    Message.error(error.message || '请求发送失败');\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * 处理认证错误\r\n * @param {number} errorCode 错误码\r\n */\nfunction handleAuthError(errorCode) {\n  // 1. 清除用户数据\n  store.dispatch('user/logout').then(() => {\n    // 2. 显示错误提示\n    MessageBox.alert(AUTH_ERROR_CODES[errorCode] || '登录状态异常', '错误提示', {\n      confirmButtonText: '重新登录',\n      type: 'error',\n      callback: () => {\n        // 3. 跳转到登录页\n        router.replace({\n          path: '/login',\n          query: {\n            redirect: router.currentRoute.fullPath\n          }\n        });\n      }\n    });\n  });\n}\n\n/**\r\n * 封装请求方法\r\n */\n\n/**\r\n * GET请求\r\n * @param {string} url \r\n * @param {object} params \r\n * @returns {Promise}\r\n */\nexport function get(url, params = {}) {\n  return instance.get(url, {\n    params\n  });\n}\n\n/**\r\n * POST请求\r\n * @param {string} url \r\n * @param {object} data \r\n * @returns {Promise}\r\n */\nexport function post(url, data = {}) {\n  return instance.post(url, data);\n}\n\n/**\r\n * PUT请求\r\n * @param {string} url \r\n * @param {object} data \r\n * @returns {Promise}\r\n */\nexport function put(url, data = {}) {\n  return instance.put(url, data);\n}\n\n/**\r\n * DELETE请求\r\n * @param {string} url \r\n * @param {object} params \r\n * @returns {Promise}\r\n */\nexport function del(url, params = {}) {\n  return instance.delete(url, {\n    params\n  });\n}\n\n/**\r\n * 文件上传\r\n * @param {string} url \r\n * @param {FormData} formData \r\n * @returns {Promise}\r\n */\nexport function upload(url, formData) {\n  return instance.post(url, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n}\nexport default instance;","map":{"version":3,"names":["axios","store","Message","MessageBox","router","instance","create","baseURL","process","env","VUE_APP_BASE_API","timeout","withCredentials","NO_TOKEN_WHITELIST","AUTH_ERROR_CODES","interceptors","request","use","config","method","params","_t","Date","now","data","FormData","requestPath","url","split","isInWhitelist","some","path","endsWith","token","localStorage","getItem","headers","currentRoute","replace","query","redirect","fullPath","Promise","reject","Error","error","console","response","res","code","handleAuthError","message","type","duration","status","errorCode","dispatch","then","alert","confirmButtonText","callback","get","post","put","del","delete","upload","formData"],"sources":["C:/Users/32049/Desktop/edu-hub-admin-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport store from '@/store'\r\nimport { Message, MessageBox } from 'element-ui'\r\nimport router from '@/router'\r\n\r\n/**\r\n * 创建axios实例\r\n */\r\nconst instance = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:8080',\r\n  timeout: 15000, // 请求超时时间\r\n  withCredentials: true // 允许携带cookie\r\n})\r\n\r\n/**\r\n * 不需要携带token的白名单接口\r\n * 完全匹配您后端的EmailController接口\r\n */\r\nconst NO_TOKEN_WHITELIST = [\r\n  '/email/sendCode', // 发送验证码接口\r\n  '/email/login',    // 验证码登录接口\r\n  '/auth/login',     // 账号密码登录接口\r\n  '/auth/captcha'    // 验证码获取接口\r\n]\r\n\r\n/**\r\n * 需要特殊处理的错误码\r\n */\r\nconst AUTH_ERROR_CODES = {\r\n  1006: '登录凭证已过期',\r\n  1008: '请重新登录',\r\n  1009: '账号已被锁定',\r\n  1011: '登录状态无效'\r\n}\r\n\r\n/**\r\n * 请求拦截器\r\n */\r\ninstance.interceptors.request.use(\r\n  config => {\r\n    // 1. 为GET请求添加随机参数防止缓存\r\n    if (config.method === 'get') {\r\n      config.params = {\r\n        ...config.params,\r\n        _t: Date.now()\r\n      }\r\n    }\r\n\r\n    // 2. 为POST请求添加时间戳（排除FormData）\r\n    if (config.method === 'post' && !(config.data instanceof FormData)) {\r\n      config.data = {\r\n        ...config.data,\r\n        _t: Date.now()\r\n      }\r\n    }\r\n\r\n    // 3. 白名单检查（精确匹配）\r\n    const requestPath = config.url.split('?')[0] // 去除query参数\r\n    const isInWhitelist = NO_TOKEN_WHITELIST.some(path => \r\n      requestPath.endsWith(path)\r\n    )\r\n\r\n    // 4. 非白名单请求添加token\r\n    if (!isInWhitelist) {\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        config.headers['x_access_token'] = token\r\n      } else {\r\n        // 未登录且访问需要认证的接口，跳转到登录页\r\n        if (router.currentRoute.path !== '/login') {\r\n          router.replace({\r\n            path: '/login',\r\n            query: { redirect: router.currentRoute.fullPath }\r\n          })\r\n        }\r\n        return Promise.reject(new Error('未登录或登录已过期'))\r\n      }\r\n    }\r\n\r\n    return config\r\n  },\r\n  error => {\r\n    console.error('请求拦截器错误:', error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n/**\r\n * 响应拦截器\r\n */\r\ninstance.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n\r\n    // 1. 请求成功（code=1000）\r\n    if (res.code === 1000) {\r\n      return res.data || res // 统一返回格式\r\n    }\r\n\r\n    // 2. 认证相关错误处理\r\n    if (AUTH_ERROR_CODES[res.code]) {\r\n      handleAuthError(res.code)\r\n      return Promise.reject(res)\r\n    }\r\n\r\n    // 3. 其他业务错误\r\n    Message({\r\n      message: res.message || '请求失败',\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(res)\r\n  },\r\n  error => {\r\n    // 网络错误处理\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          handleAuthError(1008)\r\n          break\r\n        case 403:\r\n          Message.error('没有操作权限')\r\n          break\r\n        case 404:\r\n          Message.error('请求资源不存在')\r\n          break\r\n        case 500:\r\n          Message.error('服务器内部错误')\r\n          break\r\n        default:\r\n          Message.error(`网络错误: ${error.response.status}`)\r\n      }\r\n    } else if (error.request) {\r\n      Message.error('网络连接超时，请检查网络')\r\n    } else {\r\n      Message.error(error.message || '请求发送失败')\r\n    }\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n/**\r\n * 处理认证错误\r\n * @param {number} errorCode 错误码\r\n */\r\nfunction handleAuthError(errorCode) {\r\n  // 1. 清除用户数据\r\n  store.dispatch('user/logout').then(() => {\r\n    // 2. 显示错误提示\r\n    MessageBox.alert(\r\n      AUTH_ERROR_CODES[errorCode] || '登录状态异常',\r\n      '错误提示',\r\n      {\r\n        confirmButtonText: '重新登录',\r\n        type: 'error',\r\n        callback: () => {\r\n          // 3. 跳转到登录页\r\n          router.replace({\r\n            path: '/login',\r\n            query: { \r\n              redirect: router.currentRoute.fullPath \r\n            }\r\n          })\r\n        }\r\n      }\r\n    )\r\n  })\r\n}\r\n\r\n/**\r\n * 封装请求方法\r\n */\r\n\r\n/**\r\n * GET请求\r\n * @param {string} url \r\n * @param {object} params \r\n * @returns {Promise}\r\n */\r\nexport function get(url, params = {}) {\r\n  return instance.get(url, { params })\r\n}\r\n\r\n/**\r\n * POST请求\r\n * @param {string} url \r\n * @param {object} data \r\n * @returns {Promise}\r\n */\r\nexport function post(url, data = {}) {\r\n  return instance.post(url, data)\r\n}\r\n\r\n/**\r\n * PUT请求\r\n * @param {string} url \r\n * @param {object} data \r\n * @returns {Promise}\r\n */\r\nexport function put(url, data = {}) {\r\n  return instance.put(url, data)\r\n}\r\n\r\n/**\r\n * DELETE请求\r\n * @param {string} url \r\n * @param {object} params \r\n * @returns {Promise}\r\n */\r\nexport function del(url, params = {}) {\r\n  return instance.delete(url, { params })\r\n}\r\n\r\n/**\r\n * 文件上传\r\n * @param {string} url \r\n * @param {FormData} formData \r\n * @returns {Promise}\r\n */\r\nexport function upload(url, formData) {\r\n  return instance.post(url, formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  })\r\n}\r\n\r\nexport default instance"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}